/**
 * Dragster.java
 */

/**
 * Dragster is a class to represent a dragster that races at a drag strip. Create Dragster objects and "race" them to
 * determine their elapsed time for a 1/4 mile race.
 *
 * @author James Veith jmv5576
 */
public class Dragster {

    /**
     * Private instance variable for the time it takes the driver to react to the "go" signal.
     * Typical time is around 0.5 second.
     */
    private double reactionTime;

    /**
     * Private instance variable for the amount of torque (ft-lbs) generated by the engine.
     * Typical values are around 1000.
     */
    private int torque;

    /**
     * Private constant to convert torque values to equivalent time. Value = 5000
     */
    private final double TORQUE2TIME = 5000.0;

    /**
     * Private instance variable for the amount of traction the tires have. Typical values for traction are between
     * 0.5 and 1.0. Tires are "conditioned" prior to racing by "burning out" (squealing the tires in place) to remove
     * a layer of oxidized rubber and to preheat the tire. Typical burnout times are a few seconds (under 10 seconds).
     */
    private double traction;

    /**
     * Private instance variable for the number of seconds to "burn out" the tires. Typically under 10 seconds.
     */
    private int burnTime;

    /**
     * Constructor for a Dragster.
     * @param reactionTime - time to react to start signal
     * @param torque - power generated by the engine
     * @param traction - how good the traction is
     * @param burn - how many seconds to "burn out" the tires
     */
    public Dragster(double reactionTime, int torque, double traction, int burn){
        this.reactionTime = reactionTime;
        this.torque = torque;
        this.traction = traction;
        this.burnTime = burn;
    }

    /**
     * Conditioning function to prepare tires for race
     * 2.5 * ( e^ -( (time * time - (10 * time) + 25) / 50 ) ) / sqrt( 2 * PI )
     * @param time - The number of seconds to burnout the tires
     * @return The effectiveness of that time (a number between 0 and 1)
     */
    private double conditionTires(double time){
        return 2.5 *  Math.pow( Math.E, -( (time * time - (10 * time) + 25) / 50 ) ) / Math.sqrt(2 * Math.PI);
    }

    /**
     * Function to "burn out" the dragster tires just prior to racing. Sets the traction as a result of "burning out"
     * the tires. traction = traction * burnFactor Where burnFactor is the value returned from conditionTires().
     */
    public void burnout(){
        this.traction = conditionTires(this.burnTime);
    }

    /**
     * Perform the race. Calculates a race time. The race time will be determined by the following:
     * reactionTime + ( 1 / ( (torque / TORQUE2TIME) * effectiveTraction ) )
     * @return The time for the dragster to travel 1/4 mile
     */
    public double race(){
        return this.reactionTime + ( 1 / ( (this.torque / this.TORQUE2TIME) * this.traction ) );
    }

    /**
     * Returns the following String representation of this Dragster object with the following format:
     * Reaction Time: w Torque: x Traction: y Burn Time: z Where w, x, y, and z are the reactionTime, torque, traction and burnTime
     * @return a String representation of this dragster with reaction time, torque, traction and burnout time
     */
    @Override
    public String toString(){

        return "Reaction Time: " + this.reactionTime + " Torque: " + this.torque + " Traction: " + this.traction + " Burn Time: " + this.burnTime;
    }
}//Class Dragster
